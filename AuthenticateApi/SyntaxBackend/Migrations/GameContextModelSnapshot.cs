// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SyntaxBackEnd.Models;

#nullable disable

namespace SyntaxBackEnd.Migrations
{
    [DbContext(typeof(GameContext))]
    partial class GameContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_hungarian_ci")
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("SyntaxBackEnd.Models.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("AchievementName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("char(255)")
                        .HasColumnName("achievement_name")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("achievements", (string)null);
                });

            modelBuilder.Entity("SyntaxBackEnd.Models.AchievementsConnect", b =>
                {
                    b.Property<int>("AchiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("achi_id");

                    b.Property<string>("Userid")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("varchar(254)")
                        .HasColumnName("userid");

                    b.HasKey("AchiId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Userid" }, "userid");

                    b.ToTable("achievements_connect", (string)null);
                });

            modelBuilder.Entity("SyntaxBackEnd.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("char(32)")
                        .HasColumnName("role_name")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("SyntaxBackEnd.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(254)
                        .HasColumnType("varchar(254)")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("char(64)")
                        .HasColumnName("email")
                        .IsFixedLength();

                    b.Property<DateTime>("Lastlogin")
                        .HasColumnType("datetime")
                        .HasColumnName("lastlogin");

                    b.Property<DateTime>("Regdate")
                        .HasColumnType("datetime")
                        .HasColumnName("regdate");

                    b.Property<int>("Roleid")
                        .HasColumnType("int(11)")
                        .HasColumnName("roleid");

                    b.Property<int>("UserStatsId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_stats_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("char(32)")
                        .HasColumnName("username")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Roleid" }, "User_fk0");

                    b.HasIndex(new[] { "Email" }, "email")
                        .IsUnique();

                    b.HasIndex(new[] { "UserStatsId" }, "user_stats_id");

                    b.HasIndex(new[] { "Username" }, "username")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("SyntaxBackEnd.Models.Userachievement", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(254)
                        .HasColumnType("varchar(254)")
                        .HasColumnName("user_id");

                    b.Property<int>("AchiConnectId")
                        .HasColumnType("int(11)")
                        .HasColumnName("achi_connect_id");

                    b.Property<DateTime>("AchievementDate")
                        .HasColumnType("datetime")
                        .HasColumnName("achievement_date");

                    b.Property<int>("AchievementId")
                        .HasColumnType("int(11)")
                        .HasColumnName("achievement_id");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AchievementId" }, "UserAchievements_fk0");

                    b.HasIndex(new[] { "AchiConnectId" }, "achi_connect_id");

                    b.ToTable("userachievements", (string)null);
                });

            modelBuilder.Entity("SyntaxBackEnd.Models.Userstat", b =>
                {
                    b.Property<int>("UserStatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("user_stat_id");

                    b.Property<int>("Deaths")
                        .HasColumnType("int(11)")
                        .HasColumnName("deaths");

                    b.Property<int>("Kills")
                        .HasColumnType("int(11)")
                        .HasColumnName("kills");

                    b.Property<int>("Timesplayed")
                        .HasColumnType("int(11)")
                        .HasColumnName("timesplayed");

                    b.HasKey("UserStatId")
                        .HasName("PRIMARY");

                    b.ToTable("userstats", (string)null);
                });

            modelBuilder.Entity("SyntaxBackEnd.Models.AchievementsConnect", b =>
                {
                    b.HasOne("SyntaxBackEnd.Models.User", "User")
                        .WithMany("AchievementsConnects")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("achievements_connect_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SyntaxBackEnd.Models.User", b =>
                {
                    b.HasOne("SyntaxBackEnd.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("Roleid")
                        .IsRequired()
                        .HasConstraintName("User_fk0");

                    b.HasOne("SyntaxBackEnd.Models.Userstat", "UserStats")
                        .WithMany("Users")
                        .HasForeignKey("UserStatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_ibfk_1");

                    b.Navigation("Role");

                    b.Navigation("UserStats");
                });

            modelBuilder.Entity("SyntaxBackEnd.Models.Userachievement", b =>
                {
                    b.HasOne("SyntaxBackEnd.Models.AchievementsConnect", "AchiConnect")
                        .WithMany("Userachievements")
                        .HasForeignKey("AchiConnectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("userachievements_ibfk_1");

                    b.HasOne("SyntaxBackEnd.Models.Achievement", "Achievement")
                        .WithMany("Userachievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("userachievements_ibfk_2");

                    b.Navigation("AchiConnect");

                    b.Navigation("Achievement");
                });

            modelBuilder.Entity("SyntaxBackEnd.Models.Achievement", b =>
                {
                    b.Navigation("Userachievements");
                });

            modelBuilder.Entity("SyntaxBackEnd.Models.AchievementsConnect", b =>
                {
                    b.Navigation("Userachievements");
                });

            modelBuilder.Entity("SyntaxBackEnd.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SyntaxBackEnd.Models.User", b =>
                {
                    b.Navigation("AchievementsConnects");
                });

            modelBuilder.Entity("SyntaxBackEnd.Models.Userstat", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
